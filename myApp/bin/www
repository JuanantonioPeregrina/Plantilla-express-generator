#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('myapp:server');
const http = require('http');
const { Server } = require('socket.io');
const sharedSession = require('express-socket.io-session');

// Configuración del puerto
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Crear servidor HTTP
const server = http.createServer(app);

// Configurar Socket.IO
const io = new Server(server);

// Integrar sesiones con Socket.IO
const sessionMiddleware = app.get('sessionMiddleware');
io.use(sharedSession(sessionMiddleware, { autoSave: true }));

// Vincular instancia de Socket.IO con la aplicación
app.set('io', io);

// Manejar eventos de Socket.IO
io.on('connection', (socket) => {
  const session = socket.handshake.session;

  if (!session || !session.username) {
    console.log('Usuario no autenticado. Desconectando...');
    socket.disconnect();
    return;
  }

  const username = session.username;
  console.log(`Usuario conectado: ${username}`);

  // Asociar el socket al nombre de usuario
  socket.username = username;

  // Enviar historial de mensajes
  socket.emit('chat history', app.locals.messages);

  // Manejar mensajes públicos
  socket.on('chat message', (msg) => {
    const message = { username, text: msg };
    app.locals.messages.push(message);
    io.emit('chat message', message); // Reenviar mensaje público
  });

  // Manejar mensajes privados
  socket.on('private message', ({ recipient, text }) => {
    const targetSocket = Array.from(io.sockets.sockets.values()).find(
      (s) => s.username === recipient
    );

    if (targetSocket) {
      targetSocket.emit('private message', {
        sender: username,
        text,
      });
      socket.emit('private message', {
        sender: `Tú (a ${recipient})`,
        text,
      });
    } else {
      socket.emit('private message', {
        sender: 'Sistema',
        text: `Usuario ${recipient} no está disponible.`,
      });
    }
  });

  socket.on('disconnect', () => {
    console.log(`Usuario desconectado: ${username}`);
  });
});

// Iniciar servidor
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalizar puerto
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

// Manejar errores
function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Evento de "escucha"
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log(`Servidor escuchando en ${bind}`);
}
